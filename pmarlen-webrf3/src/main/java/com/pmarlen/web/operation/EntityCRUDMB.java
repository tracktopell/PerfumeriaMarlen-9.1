/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pmarlen.web.operation;

import com.pmarlen.model.controller.EntityJPAController;
import com.pmarlen.model.controller.exceptions.IllegalOrphanException;
import com.pmarlen.web.common.view.messages.Messages;
import com.pmarlen.web.common.view.validator.ValidationException;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Hashtable;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.persistence.GeneratedValue;
import org.slf4j.Logger;

/**
 *
 * @author alfredo
 */
public abstract class EntityCRUDMB<T> implements Serializable {

	protected T entity;
	protected List<T> entityList;
	protected int numRecShow;
	protected int scrollerPage;
	protected EntityJPAController<T> entityJPAController;
	protected Logger logger;

	protected boolean prepredForNew;
	
	protected EntityCRUDMB(Logger logger) {
		this.logger = logger;
		numRecShow = 10;
	}

	public void setEntityJPAController(EntityJPAController<T> entityJPAController) {
		this.entityJPAController = entityJPAController;
	}

	public void updateRecShow(ActionEvent e) {
		FacesContext context = FacesContext.getCurrentInstance();

		String numRecShowToSet = context.getExternalContext().getRequestParameterMap().get("numRecShowToSet");

		reinicializarLista();
		actualizarLista();

		numRecShow = Integer.parseInt(numRecShowToSet);
	}

	public List<T> getEntityList() {
		return entityList;
	}

	public void actualizarLista() {
		if (entityList == null) {
			entityList = entityJPAController.findAllEntities();
		}
	}

	public void reinicializarLista() {
		entityList = null;
	}

	public void preparaNuevoRegistro(ActionEvent e) {
		logger.debug("->preparaNuevoRegistro: entityJPAController=" + entityJPAController);

		entity = entityJPAController.newEntityInstance();
		prepredForNew = true;
		logger.debug("->preparaNuevoRegistro: entity=" + entity+", prepredForNew="+prepredForNew);
	}

	public void cancelarGuardar(ActionEvent e) {
		logger.debug("-->> cancelarGuardar:");

		entity = entityJPAController.newEntityInstance();
	}

	public abstract void specialValidatationForm() throws ValidationException;

	public void aceptarGuardar(ActionEvent e) {
		logger.debug("-->> aceptarGuardar:");
		FacesContext context = FacesContext.getCurrentInstance();

		try {
			specialValidatationForm();

		} catch (ValidationException ve) {
			Hashtable<String, FacesMessage> prepraredMessages = ve.getPrepraredMessages();
			for (String componentId : prepraredMessages.keySet()) {
				context.addMessage(componentId, prepraredMessages.get(componentId));
			}
			return;
		}

		if (prepredForNew) {
			guardarNuevo();
		} else {
			actualizar();
		}
	}
	
	protected static Boolean idAutogenerated;	
	
	protected boolean isIdAutogenerated(){
		if(idAutogenerated == null){
			idAutogenerated = false;
			final Field[] declaredFields = entityJPAController.getClass().getDeclaredFields();
			for (Field f : declaredFields) {
				if (!f.isAccessible()) {

					if (f.isAnnotationPresent(javax.persistence.Id.class) && 
							f.isAnnotationPresent(javax.persistence.GeneratedValue.class)) {
						idAutogenerated = true;
					}
				}
			}
		}
		return idAutogenerated;
	}
	
	protected abstract Object parseToObjectIdValue(String id);

	public void editarRegistro(ActionEvent e) {
		FacesContext context = FacesContext.getCurrentInstance();

		String entityId = context.getExternalContext().getRequestParameterMap().get("entityId");

		entity = entityJPAController.findById(parseToObjectIdValue(entityId));
		prepredForNew = false;
		
		logger.debug("-->> editarRegistro: entity=" + entity);
		if (entity == null) {
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					Messages.getLocalizedString("COMMON_CRUD_ERROR_EDIT") + " : ",
					" NO EXISTE REGISTRO "));
		}
	}

	public abstract Object getEntityId();

	public void guardarNuevo() {
		logger.debug("-->> guardarNuevo:");
		FacesContext context = FacesContext.getCurrentInstance();

		try {
			entityJPAController.create(entity);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,
					Messages.getLocalizedString("COMMON_CRUD_OK") + " : ",
					Messages.getLocalizedString("COMMON_CRUD_OK_CREATE")));

			reinicializarLista();
			actualizarLista();
		} catch (Exception ex) {
			logger.error("guardarNuevo", ex);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					Messages.getLocalizedString("COMMON_CRUD_ERROR_CREATE") + " : ",
					ex.getMessage().toUpperCase()));
		}
	}

	public void actualizar() {
		logger.debug("-->> actualizar:");
		FacesContext context = FacesContext.getCurrentInstance();
		try {
			entityJPAController.edit(entity);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,
					Messages.getLocalizedString("COMMON_CRUD_OK") + " : ",
					Messages.getLocalizedString("COMMON_CRUD_OK_UPDATE")));
			reinicializarLista();
			actualizarLista();
		} catch (Exception ex) {
			logger.error("actualizar", ex);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					Messages.getLocalizedString("COMMON_CRUD_ERROR_EDIT") + " : ",
					ex.getMessage().toUpperCase()));
		}
	}

	public void preparEliminarRegistro(ActionEvent e) {
		logger.debug("-->> preparEliminarRegistro:");
		FacesContext context = FacesContext.getCurrentInstance();

		String entityId = context.getExternalContext().getRequestParameterMap().get("entityId");

		entity = entityJPAController.findById(parseToObjectIdValue(entityId));

		logger.debug("-->> preparEliminarRegistro: entity=" + entity);
		if (entity == null) {
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					Messages.getLocalizedString("COMMON_CRUD_ERROR_DELETE") + " : ",
					" NO EXISTE REGISTRO "));
		}
	}

	public void eliminarRegistro(ActionEvent e) {
		FacesContext context = FacesContext.getCurrentInstance();
		logger.debug("-->> eliminarRegistro: entiti.id=" + getEntityId());

		try {

			entityJPAController.destroy(getEntityId());

			logger.debug("==>> OK, removed: " + entity);

			reinicializarLista();
			actualizarLista();

			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,
					Messages.getLocalizedString("COMMON_CRUD_OK") + " : ",
					Messages.getLocalizedString("COMMON_CRUD_OK_DELETE")));

		} catch (IllegalOrphanException ex) {
			List<String> messages = ex.getMessages();
			for (String m : messages) {
				context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,
						Messages.getLocalizedString("COMMON_CRUD_WARNING_DELETE") + " : ",
						m.toUpperCase()));
			}
		} catch (Exception ex) {
			logger.error("eliminarRegistro", ex);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					Messages.getLocalizedString("COMMON_CRUD_ERROR_DELETE") + " : ",
					ex.getMessage()));
		}

	}

	public int getEntityCount() {
		if (entityList != null) {
			return entityList.size();
		} else {
			return 0;
		}
	}

	/**
	 * @return the numRecShow
	 */
	public int getNumRecShow() {
		return numRecShow;
	}

	/**
	 * @param numRecShow the numRecShow to set
	 */
	public void setNumRecShow(int numRecShow) {
		this.numRecShow = numRecShow;
	}

	/**
	 *
	 * @param scrollerPage
	 */
	public void setScrollerPage(int scrollerPage) {
		this.scrollerPage = scrollerPage;
	}

	/**
	 *
	 * @return scrollerPage
	 */
	public int getScrollerPage() {
		return scrollerPage;
	}

	public T getEntity() {
		return entity;
	}

	public void setEntity(T entity) {
		this.entity = entity;
	}
}
